2. Describe what happens if, in HelloWorld.java, you omit
a. main
  A:  error: <identifier> expected
       public static void (String[] args) {
                         ^
      There is no method name thus we get compile time error

b. String
  A: error: ',', ')', or '[' expected
       public static void main([] args) {
                                 ^
     2 errors
     Compilation-error, there is no type for the String array paramter

c. HelloWorld
  A: Compilation-error, following class keyword my contain name for that class

d. System.out
  A: Compilation-error. We refer to println() method that in System.out

e. println
  A: Compilation-error. We refer to the class System.out but no method written afterwards

****************************************************************************************************

3. Describe what happens if, in HelloWorld.java, you omit
   the ;        -> A: CE - each statement should be terminated with semi-colon ";"
   the first "  -> A: CE - unclosed string literal
   the second " -> A: same as above
   the first {  -> A: CE - no starting scope for a class definition
   the second { -> A: CE - no starting scope for a method main() definition
   the first }  -> A: CE - we are not closing method main()
   the second } -> A: CE - we are not closing class definition

****************************************************************************************************

4. see week_1/web/exercises 1.1.3

****************************************************************************************************

5. I typed in the following program.
   It compiles fine, but when I execute it, I get the error
   java.lang.NoSuchMethodError: main.
   What am I doing wrong?

   public class Hello {
      public static void main() {
         System.out.println("Doesn't execute");
      }
   }

A: main() doesn't accept any parameter. main() method must have a String array to store command
line arguments (if passed)


****************************************************************************************************
    1.2   Built-in Types of Data
****************************************************************************************************

2. What does the following statement do where grade is a variable of type int?
   boolean isA = (90 <= grade <= 100);

A: Compilation-error, java does not support this kind of syntax to check range of a number.
   The operator <= is binary operator that result in boolean type.
   "90 <= grade" is boolean, next we get "boolean <= 100" boolean and 100 are not compatible types.
    The correct way to write it will be as follows: 90 <= grade && grade <= 100

****************************************************************************************************

5. What does the following code fragment print?
   double x = (double) (3/5);
   System.out.println(x);

A: 0.0, (3/5) resulting in 0 because this is integer division and fractional part is truncated
   if we want result with fractional part one of the literals should be floating point literal.
   e.g. 3.0/5 => 0.6 or 3/5.0 => 0.6 or 3.0/5.0 => 0.6

****************************************************************************************************

█6. Why doesn't the following program print 4,294,967,296 = 2^32?
   int x = 65536;
   long y = x * x;
   System.out.println(y);

A: The product of the two int values is computed as an int, and then automatically converted to a long.
   But 65536 * 65536 = 2^32 overflows a 32 bit int before it gets converted.

****************************************************************************************************

7. What is the value of (Math.sqrt(2) * Math.sqrt(2) == 2)?

A: * has higher precedence thus first left side is beefing evaluated to double value.
   On the right we have 32 bit Integer type which will be converted to 64 bit so == can be performed.
   But, checking equality between floating points is not a good idea because of precision.

****************************************************************************************************

13. What happens if you compile LeapYear.java and execute it with
    java LeapYear                 // the line int year = Integer.parseInt(args[0]);
                                  // expects Integer argument to be passed from command line
                                  // here no args are supplied thus get get an exception
                                  // java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0
    java LeapYear 1975.5          // java.lang.NumberFormatException because we try to parse Integer
                                  // type and not double
    java LeapYear -1975           // false
    java LeapYear 1975 1976 1977  // false, other args 1976 and 1977 are ignored because we parse only
                                  // args[0] i.e. the first one which is 1975

****************************************************************************************************

14. What does the compiler do if you try to write the following expression:
    int a = 27 * "three";

A: Show error. 27 is Integer and "three" is String, the binary operator * is for numeric types only.
   String is not numeric thus it can't do the operation.
   Exact error is: "Operator '*' cannot be applied to 'int', 'java.lang.String'"

****************************************************************************************************

15. What does the compiler do if you try to write the following expression:
    double x;
    System.out.println(x);

A: Error. x is not initialized thus the compiler will not permit us using it until x will not
   get a value.
   "Variable 'x' might not have been initialized"

****************************************************************************************************

16. What does the following code fragment print.
    int threeInt = 3;
    int fourInt  = 4;
    double threeDouble = 3.0;
    double fourDouble  = 4.0;
    System.out.println(threeInt / fourInt);        // 0, integer division truncate fractional part
    System.out.println(threeInt / fourDouble);     // 0.75
    System.out.println(threeDouble / fourInt);     // 0.75
    System.out.println(threeDouble / fourDouble);  // 0.75

****************************************************************************************************

23. Temperature conversion.
    What is wrong with the following code fragment to convert from Fahrenheit (F) to Celsius (C)?
    double C = (F - 32) * (5 / 9);

A: Operation precedence. Parenthesis are evaluated first and the binary operation * which not what we want.
    (F - 32) * 5 / 9; // first (F - 32) then (F - 32) * 5 and then ((F - 32) * 5) / 9

****************************************************************************************************

24. Exponentiation.
    What is wrong with the following code fragment to compute a2, where a is of type double?
    double b = a^2;

A: ^ is boolean exclusive OR binary operator. a is of type double and 2 is integer
   both of them are not booleans thus this line will result in compilation-error.

****************************************************************************************************

25. What of the following statements is legal?
    boolean b = 1;      // illegal. 1 is integer type and not boolean
    boolean b = true;   // legal
    boolean b = "true"; // illegal. "true" is of type String not boolean
    boolean b = True;   // illegal.

****************************************************************************************************

█26. Barring overflow, give a code fragment to compute the maximum of two integers
    a and b without using Math.max() or if.

A:  int max = (a + b + Math.abs(a - b)) / 2

****************************************************************************************************

27. Discriminant of cubic polynomial.
    Given the coefficients b, c, and d of the cubic polynomial x^3 + bx^2 + cx + d,
    write an expression to compute the discriminant b^2c^2 - 4c^3 - 4b^3d - 27d^2 + 18bcd.

A: double discriminant = (b*b) * (c*c) - 4*c*c*c - 4*b*b*b*d - 27*d*d + 18*b*c*d

****************************************************************************************************

█29. Poison parentheses.
    Find a legal Java expression that leads to a compile-time error when you add parentheses
    around a subexpression to to document the order of evaluation that would take place in their absence.

A: The literal value 2147483648 (2^31) is permitted only as an operand of the unary minus operator,
   i.e., -2147483648. Enclosing it in parentheses, i.e.,
   -(2147483648), leads to a compile-time error.
   Similar ideas with the literal value 9223372036854775808L (2^63).

****************************************************************************************************